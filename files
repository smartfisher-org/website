// components/navbar.tsx
"use client"

import { Button } from "@/components/ui/button"
import Link from "next/link"

export function Navbar() {
  return (
    <header className="sticky top-0 z-40 w-full bg-transparent">
      <div className="mx-auto max-w-7xl px-4 pt-3 sm:px-6">
        {/* Long card navbar */}
        <div className="flex items-center justify-between rounded-2xl bg-slate-900/80 px-4 py-2 shadow-lg ring-1 ring-slate-800 backdrop-blur">
          {/* Left: brand */}
          <Link href="#" className="flex items-center gap-2" aria-label="SmartFISHER home">
            <img src="/images/smartfisher-logo.png" alt="SmartFISHER logo" className="h-7 w-7" />
            <span className="text-sm font-semibold tracking-tight sm:text-base">SmartFISHER</span>
          </Link>

          {/* Right: nav + CTA */}
          <div className="flex items-center gap-4 sm:gap-6">
            <nav className="hidden items-center gap-5 text-sm text-slate-300 md:flex">
              <a href="#livestream" className="hover:text-white">Livestream</a>
              <a href="#use-cases" className="hover:text-white">Use cases</a>
              <a href="#dashboard" className="hover:text-white">Dashboard</a>
              <a href="#faq" className="hover:text-white">FAQ</a>
            </nav>
            <Button
              asChild
              className="h-9 rounded-full bg-gradient-to-r from-cyan-400 via-teal-400 to-cyan-500 px-5 font-semibold text-slate-950 shadow-[0_10px_30px_-10px_rgba(34,211,238,0.6)] ring-1 ring-cyan-300/30 transition-all hover:from-cyan-300 hover:via-teal-300 hover:to-cyan-400 hover:shadow-[0_18px_40px_-12px_rgba(34,211,238,0.7)]"
            >
              <a href="#livestream">Try the demo</a>
            </Button>
          </div>
        </div>
      </div>
    </header>
  )
}

// components/hero.tsx
"use client"

import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ChevronDown } from 'lucide-react'

export function Hero() {
  return (
    <section
      className="relative overflow-hidden"
      style={{
        minHeight: "calc(100svh - 56px)", // account for navbar height
      }}
    >
      {/* Themed gradient background (no image) */}
      <div className="absolute inset-0 bg-gradient-to-br from-cyan-900/30 via-slate-900 to-slate-950" aria-hidden="true" />
      <div className="absolute inset-x-0 top-0 h-40 bg-cyan-500/10 blur-3xl" aria-hidden="true" />

      {/* Content centered with a slight downward bias; less bottom dead space */}
      <div className="relative mx-auto grid max-w-7xl grid-cols-1 items-center gap-10 px-4 pb-14 pt-16 sm:gap-12 sm:pb-16 sm:pt-20 md:grid-cols-2 md:pb-18 md:pt-24">
        {/* Left: text */}
        <div className="max-w-xl justify-self-start">
          <Badge variant="secondary" className="mb-4 border-cyan-400/30 bg-cyan-400/10 text-cyan-300">
            Real-time AI fish analytics
          </Badge>
          <h1 className="text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl">
            See beneath the surface with{" "}
            <span className="bg-gradient-to-r from-cyan-400 via-teal-300 to-emerald-300 bg-clip-text text-transparent">
              SmartFISHER
            </span>
          </h1>
          <p className="mt-4 text-lg text-slate-300">
            Identify marine species and quantify biomass automatically from underwater cameras. Stream detections live
            and explore insights in an interactive dashboard.
          </p>
          <div className="mt-8 flex flex-wrap gap-3">
            <Button
              className="h-11 rounded-full bg-gradient-to-r from-cyan-400 via-teal-400 to-cyan-500 px-6 text-base font-semibold text-slate-950 shadow-[0_18px_40px_-14px_rgba(34,211,238,0.7)] ring-1 ring-cyan-300/30 transition-all hover:from-cyan-300 hover:via-teal-300 hover:to-cyan-400 hover:shadow-[0_24px_55px_-16px_rgba(34,211,238,0.75)]"
              asChild
            >
              <a href="#livestream" aria-label="Jump to demo livestream">Try the live demo</a>
            </Button>
            <Button
              variant="outline"
              className="h-11 rounded-full border-slate-700 bg-transparent px-6 text-base text-slate-100 hover:bg-slate-800"
              asChild
            >
              <a href="#dashboard" aria-label="View analytics dashboard">View dashboard</a>
            </Button>
          </div>
        </div>

        {/* Right: single large hero image */}
        <div className="relative mx-auto w-full max-w-xl">
          <div className="overflow-hidden rounded-2xl ring-1 ring-slate-800 shadow-2xl shadow-black/40">
            <img
              src="/images/hero-underwater.png"
              alt="Underwater hero"
              className="aspect-[16/10] w-full object-cover"
            />
          </div>
        </div>
      </div>

      {/* Bottom cue inside the hero viewport */}
      <div className="pointer-events-none absolute inset-x-0 bottom-4 flex items-center justify-center">
        <a
          href="#livestream"
          className="pointer-events-auto inline-flex items-center gap-2 rounded-full bg-slate-900/70 px-4 py-2 text-sm text-slate-200 ring-1 ring-slate-800 backdrop-blur transition hover:bg-slate-900"
        >
          <span>watch the Livestream</span>
          <ChevronDown className="size-4 animate-bounce text-cyan-400" aria-hidden="true" />
        </a>
      </div>
    </section>
  )
}

// components/use-cases-carousel.tsx
import { useEffect } from "react"
import useEmblaCarousel from "embla-carousel-react"

export function UseCasesCarousel() {
  const [emblaRef, embla] = useEmblaCarousel({ loop: true })
  const [selectedIndex, setSelectedIndex] = useState(0)
  const [scrollProgress, setScrollProgress] = useState(0)
  const [hoveringRef, setHoveringRef] = useState(false)

  const onSelect = useCallback(() => {
    if (!embla) return
    setSelectedIndex(embla.selectedScrollSnap())
    setScrollProgress(embla.scrollProgress())
  }, [embla])

  useEffect(() => {
    if (!embla) return

    let timer: number | null = null
    const start = () => {
      if (timer) return
      timer = window.setInterval(() => {
        if (!hoveringRef) {
          embla.scrollNext()
        }
      }, 3000)
    }
    const stop = () => {
      if (timer) {
        window.clearInterval(timer)
        timer = null
      }
    }

    start()
    embla.on("select", onSelect)
    embla.on("pointerDown", stop)
    embla.on("pointerUp", start)

    return () => stop()
  }, [embla, onSelect])

  return (
    <div className="embla" ref={emblaRef}>
      {/* Carousel content here */}
    </div>
  )
}
