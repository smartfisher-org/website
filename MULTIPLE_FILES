"use client"

import { Button } from "@/components/ui/button"
import Link from "next/link"

export function Navbar() {
  return (
    <header className="sticky top-0 z-40 w-full bg-transparent">
      <div className="mx-auto max-w-7xl px-4 pt-3 sm:px-6">
        {/* Floating pill container */}
        <div className="mx-auto flex h-12 w-full max-w-5xl items-center justify-between rounded-full bg-slate-900/70 px-3 shadow-lg ring-1 ring-slate-800 backdrop-blur">
          {/* Left: brand only */}
          <Link href="#" className="flex items-center gap-2 px-2" aria-label="SmartFISHER home">
            <img src="/images/smartfisher-logo.png" alt="SmartFISHER logo" className="h-7 w-7" />
            <span className="text-sm font-semibold tracking-tight sm:text-base">SmartFISHER</span>
          </Link>

          {/* Right: nav + CTA */}
          <div className="flex items-center gap-4 sm:gap-6">
            <nav className="hidden items-center gap-5 text-sm text-slate-300 md:flex">
              <a href="#livestream" className="hover:text-white">Livestream</a>
              <a href="#use-cases" className="hover:text-white">Use cases</a>
              <a href="#dashboard" className="hover:text-white">Dashboard</a>
              <a href="#faq" className="hover:text-white">FAQ</a>
            </nav>
            <Button
              asChild
              className="h-9 rounded-full bg-gradient-to-r from-cyan-400 via-teal-400 to-cyan-500 px-5 font-semibold text-slate-950 shadow-[0_10px_30px_-10px_rgba(34,211,238,0.6)] ring-1 ring-cyan-300/30 transition-all hover:from-cyan-300 hover:via-teal-300 hover:to-cyan-400 hover:shadow-[0_18px_40px_-12px_rgba(34,211,238,0.7)]"
            >
              <a href="#livestream">Try the demo</a>
            </Button>
          </div>
        </div>
      </div>
    </header>
  )
}

"use client"

import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ChevronDown } from 'lucide-react'

export function Hero() {
  return (
    <section
      className="relative overflow-hidden"
      style={{
        minHeight: "calc(100svh - 56px)", // account for navbar
      }}
    >
      {/* Themed gradient background */}
      <div className="absolute inset-0 bg-gradient-to-br from-cyan-900/30 via-slate-900 to-slate-950" aria-hidden="true" />
      <div className="absolute inset-x-0 top-0 h-52 bg-cyan-500/10 blur-3xl" aria-hidden="true" />

      {/* Content: shifted down and centered vertically */}
      <div className="relative mx-auto grid max-w-7xl grid-cols-1 place-content-center items-center gap-12 px-4 pb-24 pt-8 sm:gap-14 sm:pb-28 sm:pt-10 md:grid-cols-2 md:gap-16 md:pb-32 md:pt-16">
        {/* Left copy */}
        <div className="max-w-xl justify-self-start">
          <Badge variant="secondary" className="mb-4 border-cyan-400/30 bg-cyan-400/10 text-cyan-300">
            Real-time AI fish analytics
          </Badge>
          <h1 className="text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl">
            See beneath the surface with{" "}
            <span className="bg-gradient-to-r from-cyan-400 via-teal-300 to-emerald-300 bg-clip-text text-transparent">
              SmartFISHER
            </span>
          </h1>
          <p className="mt-4 text-lg text-slate-300">
            Identify marine species and quantify biomass automatically from underwater cameras. Stream detections live
            and explore insights in an interactive dashboard.
          </p>
          <div className="mt-8 flex flex-wrap gap-3">
            <Button
              className="h-11 rounded-full bg-gradient-to-r from-cyan-400 via-teal-400 to-cyan-500 px-6 text-base font-semibold text-slate-950 shadow-[0_18px_40px_-12px_rgba(34,211,238,0.65)] ring-1 ring-cyan-300/30 transition-all hover:from-cyan-300 hover:via-teal-300 hover:to-cyan-400 hover:shadow-[0_24px_55px_-14px_rgba(34,211,238,0.7)]"
              asChild
            >
              <a href="#livestream" aria-label="Jump to demo livestream">Try the live demo</a>
            </Button>
            <Button
              variant="outline"
              className="h-11 rounded-full border-slate-700 bg-transparent px-6 text-base text-slate-100 hover:bg-slate-800"
              asChild
            >
              <a href="#dashboard" aria-label="View analytics dashboard">View dashboard</a>
            </Button>
          </div>
        </div>

        {/* Right: three straight images with minimal overlap */}
        <div className="relative mx-auto w-full max-w-xl">
          <div className="relative flex items-center justify-end">
            <img
              src="/images/hero-underwater.png"
              alt="Underwater scene"
              className="h-52 w-64 rounded-xl object-cover ring-1 ring-slate-800 shadow-2xl shadow-black/40 sm:h-60 sm:w-72"
            />
            <img
              src="/underwater-reef-fish-boxes.png"
              alt="Detection overlay example"
              className="-ml-6 h-60 w-72 rounded-xl object-cover ring-1 ring-slate-800 shadow-2xl shadow-black/40 sm:h-72 sm:w-80"
            />
            <img
              src="/underwater-video-frame.png"
              alt="Livestream frame"
              className="-ml-6 h-48 w-60 rounded-xl object-cover ring-1 ring-slate-800 shadow-2xl shadow-black/40 sm:h-56 sm:w-64"
            />
          </div>
        </div>
      </div>

      {/* Bottom cue inside the hero viewport */}
      <div className="pointer-events-none absolute inset-x-0 bottom-4 flex items-center justify-center">
        <a
          href="#livestream"
          className="pointer-events-auto inline-flex items-center gap-2 rounded-full bg-slate-900/70 px-4 py-2 text-sm text-slate-200 ring-1 ring-slate-800 backdrop-blur transition hover:bg-slate-900"
        >
          <span>watch the Livestream</span>
          <ChevronDown className="size-4 animate-bounce text-cyan-400" aria-hidden="true" />
        </a>
      </div>
    </section>
  )
}

"use client"

import useEmblaCarousel from "embla-carousel-react"
import { useCallback, useEffect, useRef, useState } from "react"
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight } from 'lucide-react'

type Slide = {
  title: string
  desc: string
  image: string
}

const slides: Slide[] = [
  {
    title: "Marine research",
    desc: "Automate population surveys and behavior studies with continuous, labeled observations.",
    image: "/placeholder-730sz.png",
  },
  {
    title: "Conservation",
    desc: "Track protected species, detect illegal activity, and quantify restoration success.",
    image: "/underwater-reef-monitoring.png",
  },
  {
    title: "Aquaculture",
    desc: "Monitor stock health, biomass growth, and feed optimization in net pens or RAS.",
    image: "/underwater-fish-farm.png",
  },
  {
    title: "Offshore energy",
    desc: "Environmental compliance monitoring around offshore turbines, platforms, and cables.",
    image: "/placeholder-gudiq.png",
  },
  {
    title: "Reef restoration",
    desc: "Measure recruitment, biomass recovery, and species mix across restoration sites.",
    image: "/coral-reef-monitoring.png",
  },
  {
    title: "Coastal health",
    desc: "Observe habitats near shorelines, ports, and estuaries to inform policy and planning.",
    image: "/coastal-health-aerial-water.png",
  },
]

export function UseCasesCarousel() {
  const [emblaRef, embla] = useEmblaCarousel({ loop: true, align: "start" })
  const [selectedIndex, setSelectedIndex] = useState(0)
  const hoveringRef = useRef(false)
  const timerRef = useRef<number | null>(null)

  const onSelect = useCallback(() => {
    if (!embla) return
    setSelectedIndex(embla.selectedScrollSnap())
  }, [embla])

  const scrollPrev = useCallback(() => embla && embla.scrollPrev(), [embla])
  const scrollNext = useCallback(() => embla && embla.scrollNext(), [embla])
  const scrollTo = useCallback((idx: number) => embla && embla.scrollTo(idx), [embla])

  // Autoplay
  useEffect(() => {
    if (!embla) return
    const start = () => {
      if (timerRef.current) return
      timerRef.current = window.setInterval(() => {
        if (!hoveringRef.current) scrollNext()
      }, 3500)
    }
    const stop = () => {
      if (timerRef.current) {
        window.clearInterval(timerRef.current)
        timerRef.current = null
      }
    }
    start()
    embla.on("select", onSelect)
    return () => {
      stop()
    }
  }, [embla, onSelect, scrollNext])

  return (
    <section id="use-cases" className="border-t border-slate-800 bg-slate-950">
      <div className="mx-auto max-w-7xl px-4 py-16 sm:py-20">
        <div className="mb-6 flex items-end justify-between">
          <div>
            <h2 className="text-3xl font-semibold tracking-tight sm:text-4xl">Where SmartFISHER shines</h2>
            <p className="mt-2 text-slate-300">From research labs to open oceans, adapt SmartFISHER to your mission.</p>
          </div>
          <div className="hidden gap-2 sm:flex">
            <Button
              variant="outline"
              size="icon"
              className="border-slate-700 bg-transparent text-slate-100 hover:bg-slate-800"
              aria-label="Previous"
              onClick={scrollPrev}
            >
              <ChevronLeft className="size-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className="border-slate-700 bg-transparent text-slate-100 hover:bg-slate-800"
              aria-label="Next"
              onClick={scrollNext}
            >
              <ChevronRight className="size-4" />
            </Button>
          </div>
        </div>

        <div
          className="relative"
          onMouseEnter={() => (hoveringRef.current = true)}
          onMouseLeave={() => (hoveringRef.current = false)}
        >
          <div className="overflow-hidden" ref={emblaRef}>
            <div className="flex">
              {slides.map((s, i) => (
                <article
                  key={s.title}
                  className="min-w-0 shrink-0 grow-0 basis-full pr-4 sm:basis-1/2 lg:basis-1/3"
                  aria-roledescription="slide"
                  aria-label={`${i + 1} of ${slides.length}`}
                >
                  <div className="group relative h-full overflow-hidden rounded-xl border border-slate-800 bg-slate-900 shadow-sm transition-transform duration-300 hover:-translate-y-1 hover:shadow-xl">
                    <div className="overflow-hidden">
                      <img
                        src={s.image || "/placeholder.svg?height=160&width=320&query=use%20case%20image"}
                        alt={s.title}
                        className="h-40 w-full origin-center transform object-cover opacity-90 transition duration-300 group-hover:scale-[1.03] sm:h-48"
                      />
                    </div>
                    <div className="space-y-2 p-4">
                      <h3 className="text-base font-semibold leading-6">{s.title}</h3>
                      <p className="text-sm text-slate-300">{s.desc}</p>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </div>

          <div className="mt-6 flex items-center justify-center gap-2 sm:hidden">
            <Button
              variant="outline"
              size="icon"
              className="border-slate-700 bg-transparent text-slate-100 hover:bg-slate-800"
              aria-label="Previous"
              onClick={scrollPrev}
            >
              <ChevronLeft className="size-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              className="border-slate-700 bg-transparent text-slate-100 hover:bg-slate-800"
              aria-label="Next"
              onClick={scrollNext}
            >
              <ChevronRight className="size-4" />
            </Button>
          </div>

          <div className="mt-4 flex justify-center gap-1.5">
            {slides.map((_, idx) => (
              <button
                key={idx}
                aria-label={`Go to slide ${idx + 1}`}
                aria-current={idx === selectedIndex}
                onClick={() => scrollTo(idx)}
                className={`h-1.5 rounded-full transition-all ${
                  idx === selectedIndex ? "w-6 bg-cyan-400" : "w-2 bg-slate-700 hover:bg-slate-600"
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}
